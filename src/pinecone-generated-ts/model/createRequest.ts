/**
 * Pinecone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CreateRequestIndexConfig } from './createRequestIndexConfig';

export class CreateRequest {
    /**
    * The name of the index to be created. The maximum length is 45 characters.
    */
    'name': string;
    /**
    * The dimensions of the vectors to be inserted in the index
    */
    'dimension': number;
    /**
    * The type of vector index. Pinecone supports \'approximated\'.
    */
    'indexType'?: string = 'approximated';
    /**
    * The distance metric to be used for similarity search. You can use \'euclidean\', \'cosine\', or \'dotproduct\'.
    */
    'metric'?: string = 'cosine';
    /**
    * The number of pods for the index to use,including replicas.
    */
    'pods'?: number = 1;
    /**
    * The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.
    */
    'replicas'?: number = 1;
    /**
    * The number of shards to be used in the index.
    */
    'shards'?: number = 1;
    /**
    * The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
    */
    'podType'?: string = 'p1.x1';
    'indexConfig'?: CreateRequestIndexConfig;
    /**
    * Configuration for the behavior of Pinecone\'s internal metadata index. By default, all metadata is indexed; when `metadata_config` is present, only specified metadata fields are indexed. To specify metadata fields to index, provide a JSON object of the following form:    ```   {\"indexed\": [\"example_metadata_field\"]}   ``` 
    */
    'metadataConfig'?: object | null;
    /**
    * The name of the collection to create an index from
    */
    'sourceCollection'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "dimension",
            "baseName": "dimension",
            "type": "number"
        },
        {
            "name": "indexType",
            "baseName": "index_type",
            "type": "string"
        },
        {
            "name": "metric",
            "baseName": "metric",
            "type": "string"
        },
        {
            "name": "pods",
            "baseName": "pods",
            "type": "number"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "shards",
            "baseName": "shards",
            "type": "number"
        },
        {
            "name": "podType",
            "baseName": "pod_type",
            "type": "string"
        },
        {
            "name": "indexConfig",
            "baseName": "index_config",
            "type": "CreateRequestIndexConfig"
        },
        {
            "name": "metadataConfig",
            "baseName": "metadata_config",
            "type": "object"
        },
        {
            "name": "sourceCollection",
            "baseName": "source_collection",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CreateRequest.attributeTypeMap;
    }
}

